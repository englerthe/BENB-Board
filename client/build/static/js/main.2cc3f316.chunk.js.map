{"version":3,"sources":["framework/IAction.ts","components/NavBar.tsx","components/Categories.tsx","components/Userdetails.tsx","state/appState.ts","reducer/appReducer.ts","framework/history.ts","components/Login.tsx","components/Register.tsx","components/SimpleAsset.tsx","components/ShowAssets.tsx","App.tsx","serviceWorker.ts","framework/CS.ts","index.tsx"],"names":["ActionType","nav","props","exact","to","Categories","Userdetails","initial","UI","counter","loggedIn","waitingForResponse","Login","errorMessage","BM","user","firstname","lastname","username","password","assets","reducerFunctions","reducer","state","action","window","CS","log","type","newState","JSON","parse","stringify","reducerFunction","undefined","INIT","createBrowserHistory","login_error","user_logged_in","user_logged_out","getUIState","getBMState","onClick","this","handleLogout","onSubmit","handleSubmit","htmlFor","placeholder","onChange","handleUsernameChange","value","handlePasswordChange","event","target","update_user","clientAction","preventDefault","uiAction","server_called","axios","post","then","res","data","console","loggedinAction","history","push","get","loggedoutAction","Component","updateAction","user_created","Register","handleFirstnameChange","handleLastnameChange","asset_updated","update_asset","assetToChange","filter","asset","_id","asset_name","asset_value","delete_asset","deleteAction","assetsToKeep","SimpleAsset","handleSwitchToEditMode","bind","handleNameChange","handleValueChange","handleSave","handleRerenderTest","handleDelete","edit_mode","edit","name","id","setState","newAsset","put","render_test","React","PureComponent","create_asset","ShowAssets","handleCreateAsset","toString","map","key","mongoose","Types","ObjectId","add_assets_from_server","App","response","responseAction","catch","error","className","NavBar","path","component","Boolean","location","hostname","match","reduxMiddleware","__REDUX_DEVTOOLS_EXTENSION__","compose","applyMiddleware","ReduxThunk","store","message","getState","createStore","dispatch","initializeStore","ReactDOM","render","stateCounter","document","getElementById","getStore","subscribe","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.2cc3f316.chunk.js","sourcesContent":["export enum ActionType {\r\n    INIT = \"@@INIT\",\r\n    login_error = \"login_error\",\r\n    user_logged_in = \"user_logged_in\",\r\n    user_logged_out = \"user_logged_out\",\r\n    update_user = \"update_user\",\r\n    user_created = \"user_created\",\r\n    user_exists = \"user_exists\",\r\n    create_asset = \"create_asset\",\r\n    update_asset = \"update_asset\",\r\n    delete_asset = \"delete_asset\",\r\n    render_test = \"render_test\",\r\n    server_called = \"server_called\",\r\n    asset_updated = \"asset_updated\",\r\n    add_assets_from_server = \"add_assets_from_server\" \r\n}\r\nexport interface IAction {\r\n    type: ActionType;\r\n}\r\n","import * as React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst nav = ( props: any ) => {\r\n    return (\r\n        <nav>\r\n            <ul>\r\n                <li><NavLink exact={true} to=\"/\">Login</NavLink></li>\r\n                <li><NavLink to=\"/register\">Register</NavLink></li>\r\n                <li><NavLink to=\"/showassets\">Assets</NavLink></li>\r\n            </ul>\r\n        </nav>\r\n    )\r\n}\r\nexport default nav;","import * as React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Categories = (props: any) => {\r\n    return (\r\n        <div>\r\n            <ul>\r\n\r\n                <li>Hier stehen die Kategorien</li>\r\n\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nexport default Categories;","import * as React from 'react';\r\nimport { NavLink } from 'react-router-dom';\r\n\r\nconst Userdetails = (props: any) => {\r\n    return (\r\n        <div>\r\n            <ul>\r\n\r\n                <li>Userdetails</li>\r\n\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\nexport default Userdetails;","export interface IUser {\r\n    firstname:string;\r\n    lastname:string;\r\n    username:string;\r\n    password:string;\r\n}\r\n\r\nexport interface ILogin{\r\n    errorMessage:string;\r\n}\r\n\r\n\r\nexport interface IUI{\r\n    counter: number;\r\n    loggedIn: boolean;\r\n    waitingForResponse:boolean;\r\n}\r\n\r\nexport interface IUI {\r\n    counter: number;\r\n    loggedIn: boolean;\r\n    waitingForResponse: boolean;\r\n    Login: ILogin;\r\n}\r\n\r\nexport interface IAssetData {\r\n    _id: string;\r\n    asset_name: string;\r\n    asset_value: number;\r\n  }\r\n\r\nexport interface IBM{\r\n    user:IUser;\r\n    assets:IAssetData[]\r\n}\r\n\r\n\r\nexport interface IState{\r\n    UI:IUI;\r\n    BM:IBM;\r\n}\r\n\r\n// initial state \r\nexport const initial:IState = {\r\n\tUI: {\r\n\t\tcounter: 0,\r\n\t\tloggedIn: false,\r\n        waitingForResponse: false,\r\n        Login: {errorMessage:\"\"}\r\n    },\r\n\tBM: {\r\n        user:{\r\n            firstname:\"\",\r\n            lastname:\"\",\r\n            username:\"\",\r\n            password:\"\"\r\n        },\r\n        assets:[]\r\n\t}\r\n};\r\n","import { initial, IState } from '../state/appState'\r\nimport { IWindow } from '../framework/IWindow'\r\nimport { IAction, ActionType } from '../framework/IAction'\r\n\r\ndeclare let window: IWindow;\r\n\r\nexport const reducerFunctions:any = {};\r\n\r\nexport const reducer = (state = initial, action: IAction) => {\r\n    window.CS.log(\"2. ACTION:\" + action.type);\r\n    let newState:IState = JSON.parse(JSON.stringify(state)) as IState;\r\n    newState.UI.counter = state.UI.counter + 1;\r\n    const reducerFunction = reducerFunctions[action.type];\r\n\tif (reducerFunction !== undefined) {\r\n\t\treducerFunction(newState,action);\r\n        return newState;\r\n    }\r\n    switch (action.type) {\r\n        case ActionType.INIT:\r\n            return newState;\r\n        default:\r\n            window.CS.log(\"1. Error!!!!! no reducer defined\");\r\n            return newState;\r\n    }\r\n}\r\n\r\n","import { createBrowserHistory } from 'history';\r\n\r\nexport default createBrowserHistory();","import React, { Component } from 'react'\r\nimport { ActionType, IAction } from '../framework/IAction';\r\nimport { IState, IUser } from '../state/appState'\r\nimport axios from 'axios';\r\nimport { IWindow } from '../framework/IWindow';\r\nimport { reducerFunctions } from '../reducer/appReducer';\r\nimport { IUserAction } from './Register';\r\nimport history from '../framework/history';\r\n\r\ndeclare let window: IWindow;\r\n\r\nexport interface IErrorMessage extends IAction {\r\n    errorMessage: string;\r\n}\r\n\r\nreducerFunctions[ActionType.login_error] = function (newState: IState, action: IErrorMessage) {\r\n    newState.UI.waitingForResponse = false;\r\n    newState.UI.Login.errorMessage = action.errorMessage;\r\n    return newState\r\n}\r\nreducerFunctions[ActionType.user_logged_in] = function (newState: IState, action: IUserAction) {\r\n    newState.UI.waitingForResponse = false;\r\n    newState.UI.Login.errorMessage = \"\";\r\n    newState.UI.loggedIn = true;\r\n    newState.BM.user = action.user;\r\n    return newState\r\n}\r\nreducerFunctions[ActionType.user_logged_out] = function (newState: IState, action: IUserAction) {\r\n    newState.UI.waitingForResponse = false;\r\n    newState.UI.Login.errorMessage = \"\";\r\n    newState.UI.loggedIn = false;\r\n    newState.BM.user = {lastname:\"\",firstname:\"\",username:\"\",password:\"\"};\r\n    return newState\r\n}\r\n\r\nexport default class Login extends Component {\r\n    render() {\r\n        if (window.CS.getUIState().loggedIn)\r\n        return (\r\n            <div>\r\n                <p>You are logged in as {window.CS.getBMState().user.username}</p>\r\n                <button onClick={this.handleLogout}>Logout</button>\r\n            </div>\r\n        )\r\n    else\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"username\">Username:</label>\r\n                    <input type=\"username\" placeholder=\"Your username\" onChange={this.handleUsernameChange} value={window.CS.getBMState().user.username} />\r\n                    <br />\r\n                    <label htmlFor=\"password\">Password:</label>\r\n                    <input type=\"password\" placeholder=\"********\" onChange={this.handlePasswordChange} value={window.CS.getBMState().user.password} />\r\n                    <br />\r\n                    <input type=\"submit\" value=\"Login\" />\r\n                </form>\r\n                <p>{window.CS.getUIState().Login.errorMessage}</p>\r\n\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleUsernameChange(event: any) {\r\n        let user = window.CS.getBMState().user;\r\n        user.username = event.target.value\r\n        const action: IUserAction = {\r\n            type: ActionType.update_user,\r\n            user: user\r\n        }\r\n        window.CS.clientAction(action);\r\n    }\r\n    handlePasswordChange(event: any) {\r\n        let user = window.CS.getBMState().user;\r\n        user.password = event.target.value\r\n        const action: IUserAction = {\r\n            type: ActionType.update_user,\r\n            user: user\r\n        }\r\n        window.CS.clientAction(action);\r\n    }\r\n\r\n    handleSubmit(event: any) {\r\n        event.preventDefault();\r\n        const uiAction: IAction = {\r\n            type: ActionType.server_called\r\n        }\r\n        window.CS.clientAction(uiAction);\r\n        axios.post('/auth/login', window.CS.getBMState().user)\r\n            .then(res => {\r\n                const data = res.data;\r\n                console.log(data);\r\n                if (data.errorMessage) {\r\n                    const uiAction: IErrorMessage = {\r\n                        type: ActionType.login_error,\r\n                        errorMessage: data.errorMessage\r\n                    }\r\n                    window.CS.clientAction(uiAction);\r\n                } else {\r\n                    const loggedinAction: IUserAction = {\r\n                        type: ActionType.user_logged_in,\r\n                        user: data as IUser\r\n                    }\r\n                    window.CS.clientAction(loggedinAction);\r\n                    history.push(\"/showassets\");\r\n                }\r\n            });\r\n    }\r\n\r\n    handleLogout() {\r\n        const uiAction: IAction = {\r\n            type: ActionType.server_called\r\n        }\r\n        window.CS.clientAction(uiAction);\r\n        axios.get('/auth/logout').then(res => {\r\n            const loggedoutAction: IAction = {\r\n                type: ActionType.user_logged_out\r\n            }\r\n            window.CS.clientAction(loggedoutAction);\r\n        }\r\n        );\r\n    }\r\n\r\n\r\n}\r\n","import React, { Component } from 'react'\r\nimport { ActionType, IAction } from '../framework/IAction';\r\nimport { IState, IUser } from '../state/appState'\r\nimport axios from 'axios';\r\nimport { IWindow } from '../framework/IWindow';\r\nimport { reducerFunctions } from '../reducer/appReducer';\r\nimport history from '../framework/history';\r\n\r\ndeclare let window: IWindow;\r\n\r\nexport interface IUserAction extends IAction {\r\n    user: IUser\r\n}\r\n\r\nreducerFunctions[ActionType.update_user] = function (newState: IState, updateAction: IUserAction) {\r\n    console.log(updateAction.user);\r\n    newState.BM.user = updateAction.user;\r\n    return newState\r\n}\r\nreducerFunctions[ActionType.user_created] = function (newState: IState, updateAction: IUserAction) {\r\n    console.log(updateAction.user);\r\n    newState.UI.waitingForResponse = false;\r\n    newState.UI.loggedIn = true ;\r\n    return newState\r\n}\r\nexport default class Register extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                <form onSubmit={this.handleSubmit}>\r\n                    <label htmlFor=\"firstname\">First name:</label>\r\n                    <input type=\"text\" placeholder=\"firstname\" onChange={this.handleFirstnameChange} value={window.CS.getBMState().user.firstname} />\r\n                    <br />\r\n                    <label htmlFor=\"lastname\">Last name:</label>\r\n                    <input type=\"text\" placeholder=\"lastname\" onChange={this.handleLastnameChange} value={window.CS.getBMState().user.lastname} />\r\n                    <br />\r\n                    <label htmlFor=\"username\">Username:</label>\r\n                    <input type=\"username\" placeholder=\"Your username\" onChange={this.handleUsernameChange} value={window.CS.getBMState().user.username} />\r\n                    <br />\r\n                    <label htmlFor=\"password\">Password:</label>\r\n                    <input type=\"password\" placeholder=\"********\" onChange={this.handlePasswordChange} value={window.CS.getBMState().user.password} />\r\n                    <br />\r\n                    <input type=\"submit\" value=\"Register as new User\" />\r\n                </form>\r\n            </div>\r\n        )\r\n    }\r\n\r\n    handleFirstnameChange(event: any) {\r\n        let user = window.CS.getBMState().user;\r\n        user.firstname = event.target.value\r\n        const action: IUserAction = {\r\n            type: ActionType.update_user,\r\n            user: user\r\n        }\r\n        window.CS.clientAction(action);\r\n    }\r\n    handleLastnameChange(event: any) {\r\n        let user = window.CS.getBMState().user;\r\n        user.lastname = event.target.value\r\n        const action: IUserAction = {\r\n            type: ActionType.update_user,\r\n            user: user\r\n        }\r\n        window.CS.clientAction(action);\r\n    }\r\n    handleUsernameChange(event: any) {\r\n        let user = window.CS.getBMState().user;\r\n        user.username = event.target.value\r\n        const action: IUserAction = {\r\n            type: ActionType.update_user,\r\n            user: user\r\n        }\r\n        window.CS.clientAction(action);\r\n    }\r\n    handlePasswordChange(event: any) {\r\n        let user = window.CS.getBMState().user;\r\n        user.password = event.target.value\r\n        const action: IUserAction = {\r\n            type: ActionType.update_user,\r\n            user: user\r\n        }\r\n        window.CS.clientAction(action);\r\n    }\r\n    handleSubmit(event: any) {\r\n        event.preventDefault();\r\n        const uiAction: IAction = {\r\n            type: ActionType.server_called\r\n        }\r\n        window.CS.clientAction(uiAction);\r\n        axios.post('/auth/signup', window.CS.getBMState().user)\r\n            .then(res => {\r\n                const uiAction: IAction = {\r\n                    type: ActionType.user_created\r\n                }\r\n                history.push('/');\r\n                window.CS.clientAction(uiAction);\r\n\r\n                console.log(res.data)\r\n            });\r\n    }\r\n}\r\n","import React from 'react';\r\nimport { IAssetAction } from './ShowAssets';\r\nimport { ActionType, IAction } from '../framework/IAction';\r\nimport { IAssetData, IState } from '../state/appState'\r\nimport axios from 'axios';\r\n\r\nimport { IWindow } from '../framework/IWindow';\r\nimport { reducerFunctions } from '../reducer/appReducer';\r\ndeclare let window: IWindow;\r\n\r\n//this file defines the React component that renders a single asset to the browser window\r\n//it also contains the logic to change asset properties and save the changes to the database\r\n//most of the used React framework features are already explained in the comments of App.js\r\n//so this code hopefully mostly explains itself ...\r\n\r\ninterface IProps {\r\n    edit: boolean;\r\n    asset: IAssetData;\r\n}\r\n\r\ninterface IJSXState {\r\n    edit_mode: boolean;\r\n}\r\n\r\nreducerFunctions[ActionType.asset_updated] = function (newState: IState, updateAction: IAssetAction) {\r\n    newState.UI.waitingForResponse=false;\r\n}\r\nreducerFunctions[ActionType.update_asset] = function (newState: IState, updateAction: IAssetAction) {\r\n    let assetToChange: IAssetData[] = newState.BM.assets.filter(asset => asset._id === updateAction.asset._id)\r\n    console.log(assetToChange);\r\n    assetToChange[0].asset_name = updateAction.asset.asset_name;\r\n    assetToChange[0].asset_value = updateAction.asset.asset_value;\r\n    return newState;\r\n}\r\nreducerFunctions[ActionType.delete_asset] = function (newState: IState, deleteAction: IAssetAction) {\r\n    let assetsToKeep: IAssetData[] = newState.BM.assets.filter(asset => asset._id !== deleteAction.asset._id)\r\n    newState.BM.assets = assetsToKeep;\r\n    return newState;\r\n}\r\n\r\n\r\nexport default class SimpleAsset extends React.PureComponent<IProps, IJSXState> {\r\n\r\n    constructor(props: IProps) {\r\n        super(props);\r\n\r\n        this.handleSwitchToEditMode = this.handleSwitchToEditMode.bind(this);\r\n        this.handleNameChange = this.handleNameChange.bind(this);\r\n        this.handleValueChange = this.handleValueChange.bind(this);\r\n        this.handleSave = this.handleSave.bind(this);\r\n        this.handleRerenderTest = this.handleRerenderTest.bind(this);\r\n        this.handleDelete = this.handleDelete.bind(this);\r\n\r\n        this.state = {\r\n            edit_mode: props.edit,\r\n        }\r\n    }\r\n\r\n    render() {\r\n\r\n        //if the component is in edit mode, it will render different than if it just shows the data\r\n        if (this.state.edit_mode)\r\n            return (\r\n                <tr>\r\n                    <td><input type=\"text\" name=\"name\" value={this.props.asset.asset_name} onChange={this.handleNameChange} /></td>\r\n                    <td><input type=\"number\" name=\"value\" value={this.props.asset.asset_value} onChange={this.handleValueChange} /> €</td>\r\n                    <td>\r\n                        <button onClick={this.handleSave} id={this.props.asset._id}>save</button>\r\n                        <button onClick={this.handleRerenderTest} >increase State Counter</button>\r\n                    </td>\r\n                </tr>\r\n            )\r\n        else\r\n            return (\r\n                <tr>\r\n                    <td>{this.props.asset.asset_name}</td>\r\n                    <td>{this.props.asset.asset_value} €</td>\r\n                    <td>\r\n                        <button onClick={this.handleSwitchToEditMode}>edit</button>\r\n                        <button onClick={this.handleDelete} id={this.props.asset._id}>sell or dispose</button>\r\n                        <button onClick={this.handleRerenderTest} >increase State Counter {window.CS.getUIState().counter}</button>\r\n                    </td>\r\n                </tr>\r\n            )\r\n    }\r\n    handleSwitchToEditMode() {\r\n        this.setState({ edit_mode: true });\r\n    }\r\n    handleNameChange(event: any) {\r\n        const newAsset = this.props.asset;\r\n        newAsset.asset_name = event.target.value\r\n        const action: IAssetAction = {\r\n            type: ActionType.update_asset,\r\n            asset: newAsset\r\n        }\r\n        window.CS.clientAction(action);\r\n    }\r\n    handleValueChange(event: any) {\r\n        const newAsset = this.props.asset;\r\n        newAsset.asset_value = event.target.value;\r\n        const action: IAssetAction = {\r\n            type: ActionType.update_asset,\r\n            asset: newAsset\r\n        }\r\n        window.CS.clientAction(action);\r\n    }\r\n    handleSave(event: any) {\r\n        this.setState({ edit_mode: false });\r\n        const uiAction: IAction = {\r\n            type: ActionType.server_called\r\n          }\r\n          window.CS.clientAction(uiAction);\r\n        axios.put('/assets/update/' + this.props.asset._id, this.props.asset)\r\n        .then(res => {\r\n            const uiAction: IAction = {\r\n                type: ActionType.asset_updated\r\n              }\r\n              window.CS.clientAction(uiAction);\r\n        });\r\n    }\r\n    handleDelete() {\r\n        const uiAction: IAction = {\r\n            type: ActionType.server_called\r\n          }\r\n          window.CS.clientAction(uiAction);\r\n          axios.post('/assets/delete/' + this.props.asset._id)\r\n          .then(res => {\r\n            const action: IAssetAction = {\r\n                type: ActionType.delete_asset,\r\n                asset: this.props.asset\r\n            }\r\n            window.CS.clientAction(action)\r\n          });\r\n    }\r\n    handleRerenderTest(event: any) {\r\n        const action: IAction = {\r\n            type: ActionType.render_test,\r\n        }\r\n        window.CS.clientAction(action);\r\n    }\r\n}","import React, { Component } from 'react'\r\n\r\nimport SimpleAsset from './SimpleAsset'\r\nimport mongoose from 'mongoose';\r\nimport { IAction, ActionType } from '../framework/IAction';\r\nimport {IAssetData,IState} from '../state/appState'\r\nimport axios from 'axios';\r\nimport { reducerFunctions } from '../reducer/appReducer';\r\n\r\nimport { IWindow } from '../framework/IWindow'\r\ndeclare let window: IWindow;\r\n\r\ninterface IProps{};\r\ninterface IJSXState { };\r\nexport interface IAssetAction extends IAction {\r\n  asset: IAssetData\r\n}\r\nreducerFunctions[ActionType.create_asset] = function (newState: IState, action: IAssetAction) {\r\n  newState.BM.assets.push(action.asset);\r\n  newState.UI.waitingForResponse=false;\r\n  return newState;\r\n}\r\n\r\nexport default class ShowAssets extends Component<IProps, IJSXState> {\r\n    constructor(props: any) {\r\n        console.log(\"new App component will be initialized\");\r\n        super(props);\r\n        this.handleCreateAsset = this.handleCreateAsset.bind(this);\r\n      }\r\n    render() {\r\n        return (\r\n            <div>\r\n          <p> {window.CS.getUIState().waitingForResponse.toString()}{window.CS.getUIState().counter}</p>\r\n          <h1>simple asset management application</h1>\r\n          <p>to create a new asset click this button:&nbsp;\r\n            <button onClick={this.handleCreateAsset}>create asset</button>\r\n          </p>\r\n          <table>\r\n            <tbody>\r\n              <tr><th>description</th><th>value</th><th>action</th></tr>\r\n              {window.CS.getBMState().assets.map(asset => <SimpleAsset key={asset._id} asset={asset} edit={false} />)}\r\n            </tbody>\r\n          </table>\r\n        </div>\r\n        )\r\n    }\r\n    handleCreateAsset() {\r\n        console.log(\"handleCreateAsset invoked\");\r\n        const uiAction: IAction = {\r\n          type: ActionType.server_called\r\n        }\r\n        window.CS.clientAction(uiAction);\r\n        const newAsset: IAssetData = {\r\n          _id: mongoose.Types.ObjectId().toString(),\r\n          asset_name: \"\",\r\n          asset_value: 0\r\n        }\r\n        const action: IAssetAction = {\r\n          type: ActionType.create_asset,\r\n          asset: newAsset\r\n        }\r\n        axios.post('/assets/add', newAsset)\r\n        .then(res => {\r\n          window.CS.clientAction(action);\r\n          console.log(res.data)\r\n        });\r\n      }\r\n}\r\n","import React from 'react';\r\nimport NavBar from './components/NavBar';\r\nimport Categories from './components/Categories';\r\nimport Userdetails from './components/Userdetails';\r\nimport Login from './components/Login';\r\nimport Register from './components/Register';\r\nimport ShowAssets from './components/ShowAssets';\r\nimport { Switch, Route } from 'react-router-dom';\r\nimport { IAction, ActionType } from './framework/IAction';\r\nimport { IAssetData, IState } from './state/appState'\r\nimport axios from 'axios';\r\nimport { reducerFunctions } from './reducer/appReducer';\r\n\r\nimport { IWindow } from './framework/IWindow'\r\ndeclare let window: IWindow;\r\n\r\ninterface IProps {\r\n  stateCounter: number\r\n}\r\n\r\nexport interface IAssetsLoadedAction extends IAction {\r\n  assets: IAssetData[]\r\n}\r\nreducerFunctions[ActionType.server_called] = function (newState: IState, action: IAction) {\r\n  newState.UI.waitingForResponse = true;\r\n  return newState;\r\n}\r\nreducerFunctions[ActionType.add_assets_from_server] = function (newState: IState, action: IAssetsLoadedAction) {\r\n  newState.UI.waitingForResponse = false;\r\n  newState.BM.assets = action.assets;\r\n  return newState;\r\n}\r\nexport default class App extends React.PureComponent<IProps> {\r\n\r\n  componentDidMount() {\r\n    const uiAction: IAction = {\r\n      type: ActionType.server_called\r\n    }\r\n    window.CS.clientAction(uiAction);\r\n    axios.get('/assets/read').then(response => {\r\n      console.log(\"this data was loaded as a result of componentDidMount:\");\r\n      console.log(response.data);\r\n      const responseAction: IAssetsLoadedAction = {\r\n        type: ActionType.add_assets_from_server,\r\n        assets: response.data as IAssetData[]\r\n      }\r\n      window.CS.clientAction(responseAction);\r\n    }).catch(function (error) { console.log(error); })\r\n  }\r\n\r\n  render() {\r\n    window.CS.log(\"App --> render()\")\r\n    return (\r\n      <div className=\"container-body\">\r\n        <NavBar /> {/* oben  */}\r\n        <div className=\"container-main-content\"> {/* mitte */}\r\n        <div><Categories /></div> {/* mitte links */}\r\n        <Switch>\r\n          <Route path=\"/showassets\" component={ShowAssets} />\r\n          <Route path=\"/register\" component={Register} /> {/* mitte mitte */}\r\n          <Route path=\"/\" component={Login} />\r\n        </Switch>\r\n        <div><Userdetails /></div> {/* mitte rechts */}\r\n        </div>\r\n        <div className=\"footer\">Footer</div> {/* unten */}\r\n      </div>\r\n    );\r\n  }\r\n\r\n}\r\n\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport { reducer } from '../reducer/appReducer'\r\nimport ReduxThunk from 'redux-thunk';\r\n\r\nimport { IUI, IBM } from '../state/appState';\r\nimport { IWindow } from './IWindow'\r\nimport { IAction } from './IAction';\r\ndeclare let window: IWindow;\r\n\r\n//Dev tools are needed so we can see the state in the browser\r\n//Redux thunk is needed for actions that make a rest call in order to create another action, when the server responds\r\nlet reduxMiddleware: any;\r\nif (window.__REDUX_DEVTOOLS_EXTENSION__) {\r\n    reduxMiddleware = compose(\r\n        applyMiddleware(ReduxThunk),\r\n        window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__()\r\n    );\r\n} else { reduxMiddleware = applyMiddleware(ReduxThunk); }\r\n\r\n\r\nexport class CS {\r\n    private store: any;\r\n    public log(message: string) {\r\n        console.log(message);\r\n    }\r\n    public getStore(){\r\n        return this.store;\r\n    }\r\n    public getState() {\r\n        return this.store.getState();\r\n    }\r\n    public getUIState() {\r\n        return this.getState().UI as IUI;\r\n    }\r\n    public getBMState() {\r\n        return this.getState().BM as IBM;\r\n    }\r\n    public initializeStore() {\r\n        this.store = createStore(\r\n            reducer,\r\n            reduxMiddleware\r\n        );\r\n    }\r\n   //changed this to any because of the thunk returning a function ...\r\n   public clientAction(action:IAction | Function){\r\n    this.store.dispatch(action);\r\n    }\r\n    public getDBServerURL_test(){\r\n        //return \"https://patricks-boilerplate.herokuapp.com/\";\r\n        return \"http://localhost:8080\";\r\n    }\r\n}","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { Router } from 'react-router-dom';\r\nimport history from './framework/history';\r\n//import framework components\r\n//CS: ClientServices, we will use them a lot, so to shorten the code they are just called: CS\r\nimport { CS } from './framework/CS';\r\n//we will add a CS instance to the window object.\r\n//We also want the window object strictly typed, so we declare that window has the type \"IWindow\"\r\nimport { IWindow } from './framework/IWindow'\r\ndeclare let window: IWindow;\r\nwindow.CS = new CS();\r\n//we create the inital Application State\r\nwindow.CS.initializeStore();\r\n\r\n//now we can render this state to the DOM using React\r\nReactDOM.render(\r\n  <Router history={history}>\r\n  <App stateCounter={window.CS.getUIState().counter} />\r\n  </Router>\r\n, document.getElementById('root'));\r\n\r\n\r\n//whenever there is a new state, we render the whole virtual DOM again\r\n//React will take care that only the differences from the previous and\r\n//the current virtual DOM will be rendered to the browser DOM\r\nwindow.CS.getStore().subscribe(() => {\r\n  window.CS.log(\"3. before render ---------------------------------------------\");\r\n  ReactDOM.render(<Router history={history}>\r\n                  <App stateCounter={window.CS.getUIState().counter} />\r\n                  </Router>, document.getElementById('root'));\r\n  window.CS.log(\"3. after render ---------------------------------------------\");\r\n});\r\n\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}